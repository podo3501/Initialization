//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc Default.hlsl /Od /Zi /T ps_5_0 /E PS /Fo color_ps.cso /Fc color_ps.asm
//    /D ALPHA_TEST
//
//
// Buffer Definitions: 
//
// cbuffer cbPass
// {
//
//   float4x4 gView;                    // Offset:    0 Size:    64 [unused]
//   float4x4 gInvView;                 // Offset:   64 Size:    64 [unused]
//   float4x4 gProj;                    // Offset:  128 Size:    64 [unused]
//   float4x4 gInvProj;                 // Offset:  192 Size:    64 [unused]
//   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
//   float4x4 gInvViewProj;             // Offset:  320 Size:    64 [unused]
//   float3 gEyePosW;                   // Offset:  384 Size:    12
//   float cbPerObjectPad1;             // Offset:  396 Size:     4 [unused]
//   float2 gRenderTargetSize;          // Offset:  400 Size:     8 [unused]
//   float2 gInvRenderTargetSize;       // Offset:  408 Size:     8 [unused]
//   float gNearZ;                      // Offset:  416 Size:     4 [unused]
//   float gFarZ;                       // Offset:  420 Size:     4 [unused]
//   float gTotalTime;                  // Offset:  424 Size:     4 [unused]
//   float gDeltaTime;                  // Offset:  428 Size:     4 [unused]
//   float4 gAmbientLight;              // Offset:  432 Size:    16
//   float4 gFogColor;                  // Offset:  448 Size:    16 [unused]
//   float gFogStart;                   // Offset:  464 Size:     4 [unused]
//   float gFogRange;                   // Offset:  468 Size:     4 [unused]
//   float2 cbPerObjectPad2;            // Offset:  472 Size:     8 [unused]
//   
//   struct Light
//   {
//       
//       float3 Strength;               // Offset:  480
//       float FalloffStart;            // Offset:  492
//       float3 Direction;              // Offset:  496
//       float FalloffEnd;              // Offset:  508
//       float3 Position;               // Offset:  512
//       float SpotPower;               // Offset:  524
//
//   } gLights[16];                     // Offset:  480 Size:   768
//
// }
//
// cbuffer cbMaterial
// {
//
//   float4 gDiffuseAlbedo;             // Offset:    0 Size:    16
//   float3 gFresnelR0;                 // Offset:   16 Size:    12
//   float gRoughness;                  // Offset:   28 Size:     4
//   float4x4 gMatTransform;            // Offset:   32 Size:    64 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gsamAnisotropicWrap               sampler      NA          NA    4        1
// gDiffuseMap                       texture  float4          2d    0        1
// cbPass                            cbuffer      NA          NA    1        1
// cbMaterial                        cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float       
// POSITION                 0   xyz         1     NONE  float   xyz 
// NORMAL                   0   xyz         2     NONE  float   xyz 
// TEXCOORD                 0   xy          3     NONE  float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_Target                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[78], dynamicIndexed
dcl_constantbuffer cb2[2], immediateIndexed
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xy
dcl_output o0.xyzw
dcl_temps 13

#line 98 "D:\DirectX12\Initialization\Blend\Shaders\Default.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s4
mul r0.xyzw, r0.xyzw, cb2[0].xyzw  // diffuseAlbedo<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 101
add r1.x, r0.w, l(-0.100000)
lt r1.x, r1.x, l(0.000000)
and r1.x, r1.x, l(-1)
discard r1.x

#line 104
dp3 r1.x, v2.xyzx, v2.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
mov r2.xyz, -v1.xyzx
add r2.xyz, r2.xyzx, cb1[24].xyzx  // toEyeW<0:Inf,1:Inf,2:Inf>
dp3 r1.w, r2.xyzx, r2.xyzx
sqrt r1.w, r1.w  // distToEye<0:NaN:Inf>
div r2.xyz, r2.xyzx, r1.wwww  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r3.xyz, r0.xyzx, cb1[27].xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.w, -cb2[1].w
add r4.w, r1.w, l(1.000000)  // shininess<0>
mov r5.xyz, r0.xyzx  // mat<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.w, cb2[1].x  // mat<4>
mov r4.yz, cb2[1].yyzy  // mat<5,6>
mov r4.w, r4.w  // mat<7>
nop 
mov r5.xyzw, r5.xyzw  // mat<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,4>
mov r4.yzw, r4.yyzw  // mat<5,6,7>
mov r1.xyz, r1.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyz, r2.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 142 "LightingUtil.hlsl"
mov r0.xyz, l(0,0,0,0)  // result<0: 0f,1: 0f,2: 0f>

#line 147
mov r1.w, l(0)  // i<0: 0>
mov r6.xyz, r0.xyzx  // result<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.w, r1.w  // i<0>
loop 
  ilt r3.w, r2.w, l(3)
  breakc_z r3.w
  nop 
  imul null, r3.w, r2.w, l(3)
  mov r7.xyz, cb1[r3.w + 30].xyzx  // L<0,1,2>
  mov r8.xyz, cb1[r3.w + 31].xyzx  // L<4,5,6>
  mov r9.x, r5.w  // mat<4>
  mov r9.yzw, r4.yyzw  // mat<5,6,7>
  mov r10.xyz, r5.xyzx  // mat<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r11.xyz, r1.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r12.xyz, r2.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 67
  mov r8.xyz, -r8.xyzx  // lightVec<0,1,2>

#line 70
  dp3 r3.w, r8.xyzx, r11.xyzx
  max r3.w, r3.w, l(0.000000)  // ndotl<0:Inf:[-0f,1.#INFf]>
  mul r7.xyz, r3.wwww, r7.xyzx  // lightStrength<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  nop 
  mov r7.xyz, r7.xyzx  // lightStrength<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r8.xyz, r8.xyzx  // lightVec<0,1,2>
  mov r11.xyz, r11.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r12.xyz, r12.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r10.xyz, r10.xyzx  // mat<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r9.xyzw, r9.xyzw  // mat<4,5,6,7>

#line 46
  mul r3.w, r9.w, l(256.000000)  // m<0:Inf>
  add r12.xyz, r8.xyzx, r12.xyzx
  dp3 r4.x, r12.xyzx, r12.xyzx
  rsq r4.x, r4.x
  mul r12.xyz, r4.xxxx, r12.xyzx  // halfVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r4.x, r3.w, l(8.000000)
  dp3 r6.w, r12.xyzx, r11.xyzx
  max r6.w, r6.w, l(0.000000)
  log r6.w, r6.w
  mul r3.w, r3.w, r6.w
  exp r3.w, r3.w
  mul r3.w, r3.w, r4.x
  div r3.w, r3.w, l(8.000000)  // roughnessFactor<0:NaN:Inf>
  nop 
  mov r9.xyz, r9.xyzx  // R0<0,1,2>
  mov r12.xyz, r12.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r8.xyz, r8.xyzx  // lightVec<0,1,2>

#line 36
  dp3 r4.x, r12.xyzx, r8.xyzx
  max r4.x, r4.x, l(0.000000)
  min r4.x, r4.x, l(1.000000)  // cosIncidentAngle<0:[0f,1f]>
  mov r4.x, -r4.x
  add r4.x, r4.x, l(1.000000)  // f0<0:[0f,1f]>
  mov r8.xyz, -r9.xyzx
  add r8.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r6.w, r4.x, r4.x
  mul r6.w, r4.x, r6.w
  mul r6.w, r4.x, r6.w
  mul r4.x, r4.x, r6.w
  mul r8.xyz, r4.xxxx, r8.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // reflectPercent<0:Inf,1:Inf,2:Inf>
  mov r8.xyz, r8.xyzx  // SchlickFresnel<0:Inf,1:Inf,2:Inf>

#line 50
  mov r8.xyz, r8.xyzx  // fresnelFactor<0:Inf,1:Inf,2:Inf>
  mul r8.xyz, r3.wwww, r8.xyzx  // specAlbedo<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 56
  add r9.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  div r8.xyz, r8.xyzx, r9.xyzx  // specAlbedo<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r8.xyz, r8.xyzx, r10.xyzx
  mul r7.xyz, r7.xyzx, r8.xyzx  // BlinnPhong<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 73
  mov r7.xyz, r7.xyzx  // ComputeDirectionalLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 149
  mul r7.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r6.xyz, r6.xyzx, r7.xyzx  // result<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  iadd r2.w, r2.w, l(1)  // i<0>
endloop 

#line 167
mov r6.xyz, r6.xyzx  // ComputeLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 114 "D:\DirectX12\Initialization\Blend\Shaders\Default.hlsl"
mov r6.xyz, r6.xyzx  // directLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
add r0.xyz, r3.xyzx, r6.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 123
mov r0.w, r0.w  // litColor<3:NaN:Inf>
mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o0.w, r0.w  // PS<3:NaN:Inf>
ret 
// Approximately 102 instruction slots used
